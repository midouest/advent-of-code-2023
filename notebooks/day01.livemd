# Day 1

```elixir
Mix.install([
  {:my_aoc, path: Path.join(__DIR__, "../my_aoc")},
  {:kino, "~> 0.11.3"}
])
```

## Puzzle

```elixir
aoc = MyAOC.new(2023, 1)

MyAOC.prompt!(aoc)
|> Kino.HTML.new()
```

```elixir
input = MyAOC.input!(aoc)

IO.inspect(input)
|> Kino.Text.new(terminal: true)
```

<!-- livebook:{"branch_parent_index":0} -->

## Part 1

```elixir
calibration_value = fn line ->
  chars =
    line
    |> String.graphemes()

  {first, _} =
    chars
    |> Enum.find(&String.match?(&1, ~r/\d/))
    |> Integer.parse()

  {last, _} =
    chars
    |> Enum.reverse()
    |> Enum.find(&String.match?(&1, ~r/\d/))
    |> Integer.parse()

  Integer.undigits([first, last])
end
```

```elixir
answer =
  input
  |> String.trim_trailing()
  |> String.splitter("\n")
  |> Enum.map(calibration_value)
  |> Enum.sum()
```

```elixir
res = MyAOC.answer!(aoc, 1, answer)
Kino.HTML.new(res)
```

<!-- livebook:{"branch_parent_index":0} -->

## Part 2

```elixir
to_digit = fn
  "zero" -> 0
  "one" -> 1
  "two" -> 2
  "three" -> 3
  "four" -> 4
  "five" -> 5
  "six" -> 6
  "seven" -> 7
  "eight" -> 8
  "nine" -> 9
  d -> Integer.parse(d) |> elem(0)
end

calibration_value = fn line ->
  matches =
    0..(String.length(line) - 1)
    |> Enum.map(&String.slice(line, &1..String.length(line)))
    |> Enum.map(&Regex.run(~r/\d|zero|one|two|three|four|five|six|seven|eight|nine/, &1))
    |> Enum.filter(&(!is_nil(&1)))
    |> Enum.flat_map(&Function.identity/1)

  first =
    List.first(matches)
    |> to_digit.()

  last =
    List.last(matches)
    |> to_digit.()

  Integer.undigits([first, last])
end
```

```elixir
answer =
  input
  |> String.trim_trailing()
  |> String.splitter("\n")
  |> Enum.map(calibration_value)
  |> Enum.sum()
```

```elixir
res = MyAOC.answer!(aoc, 2, answer)
Kino.HTML.new(res)
```

<!-- livebook:{"offset":1821,"stamp":{"token":"XCP.OrpgrXjA9qzBlpNNK_Fjy39uasHTigfaW2UH47KXdXFiHV0RWJnt1aECTmf0gviVa0DdePabRZ88mm8G4K81qjzC5A5iSoOEBPGtvTOkJsFISE-i7R8","version":2}} -->
